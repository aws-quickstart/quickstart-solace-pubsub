---
#enable
#configure
#redundancy
#switchover-mechanism hostlist
#group
#create node VMR-perf-155-HA-Primary
#ip 192.168.169.101
#node-type message-routing-node
#exit
#create node VMR-perf-154-HA-Backup
#ip 192.168.169.202
#node-type message-routing-node
#exit
#create node VMR-perf-94-HA-Monitor
#ip 192.168.169.128
#node-type monitor-node
#exit
#password passwd

- hosts: LOCALHOST

  tasks:
    - name: Redundancy switchover mechanism
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><switchover-mechanism><hostlist/></switchover-mechanism></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Primary node create
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><create><node>\
                           <node-name>{{ PRIMARY_ROUTER.NAME }}</node-name>\
                           </node></create></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Primary node configure ip
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><node>\
                           <node-name>{{ PRIMARY_ROUTER.NAME }}</node-name>\
                           <ip><ip>{{ PRIMARY_ROUTER.IP }}</ip></ip>\
                           </node></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Primary node configure node-type
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><node>\
                           <node-name>{{ PRIMARY_ROUTER.NAME }}</node-name>\
                           <node-type><message-routing-node/></node-type>\
                           </node></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Backup node create
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><create><node>\
                           <node-name>{{ BACKUP_ROUTER.NAME }}</node-name>\
                           </node></create></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Backup node ip
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><node>\
                           <node-name>{{ BACKUP_ROUTER.NAME }}</node-name>\
                           <ip><ip>{{ BACKUP_ROUTER.IP }}</ip></ip>\
                           </node></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Backup node node-type
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><node>\
                           <node-name>{{ BACKUP_ROUTER.NAME }}</node-name>\
                           <node-type><message-routing-node/></node-type>\
                           </node></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Monitor node create
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><create><node>\
                           <node-name>{{ MONITOR.NAME }}</node-name>\
                           </node></create></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Monitor node ip
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><node>\
                           <node-name>{{ MONITOR.NAME }}</node-name>\
                           <ip><ip>{{ MONITOR.IP }}</ip></ip>\
                           </node></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group Monitor node
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><node>\
                           <node-name>{{ MONITOR.NAME }}</node-name>\
                           <node-type><monitor-node/></node-type>\
                           </node></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10

    - name: Redundancy group password
      uri:
         url:              "http://{{ ANSIBLE_VMR_IP }}:{{ ANSIBLE_VMR_SEMP_PORT }}/SEMP"
         method:           GET
         user:             "{{ ANSIBLE_USERNAME }}"
         password:         "{{ lookup('env','admin_password') }}"
         body:             "<rpc semp-version='soltr/8_2VMR'>\
                           <redundancy><group><password><password>pA55w0rD</password></password></group></redundancy></rpc>"
         force_basic_auth: yes
         status_code:      200
         body_format:      raw
         return_content:   yes
      register: rpc_reply
      ignore_errors: True
      until: rpc_reply.content.find("code=\"ok\"") != -1
      retries: 60
      delay: 10
